@page "/"
@page "/{ServerAbbreviation}"
@using RiotGames.LeagueOfLegends
@using Sentry
@implements IDisposable
@inject NavigationManager NavManager
@inject ILocalStorageService localStorage

<PageTitle>The Masteries Quest 🏆</PageTitle>

<h1>The Masteries Quest 🏆</h1>

<p class="mb-4">Use the search at the top to look up a summoners champion masteries.</p>

@if (_featuredGames != null)
{
    <div class="card text-center animated--grow-in">
        <h2 class="card-header">
            Featured Games
        </h2>
        <div class="card-body">
            <div class="card-columns">
                @foreach (var game in _featuredGames)
                {
                    var matchLink = $"/{ServerAbbreviation}/matches/{game.GameId}/{string.Join(',', game.Participants.GroupBy(p => p.TeamId).First().Select(p => Uri.EscapeDataString(p.SummonerName)))}";
                    <div class="card">
                        <h3 class="card-header">
                            <a href="@matchLink">@game.GameMode</a>
                        </h3>
                        <div class="card-body">
                            <div class="row">
                                @foreach (var teamId in game.Participants.Select(p => p.TeamId).Distinct())
                                {
                                    var blueTeam = teamId == game.Participants.Select(p => p.TeamId).First();
                                    var backgroundColor = blueTeam ? "rgba(0, 34, 89)" : "rgba(89, 0, 0)";
                                    <div class="list-group col p-0" style="border-top: .25rem solid @backgroundColor">
                                        @foreach (var participant in game.Participants.Where(p => p.TeamId == teamId))
                                        {
                                            Server.TryParse(game.PlatformId, out var server);
                                            var link = $"/{server.Abbreviation.ToLower()}/{participant.SummonerName}";
                                            <a href="@link" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                                @if (!blueTeam)
                                                {
                                                    @participant.SummonerName
                                                }

                                                @if (_masteryPoints.TryGetValue((game.PlatformId, participant.SummonerName), out var championPoints))
                                                {
                                                    <span class="badge badge-primary badge-pill">@championPoints.ToString("N0") pts</span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-secondary badge-pill">Loading...</span>
                                                }

                                                @if (blueTeam)
                                                {
                                                    @participant.SummonerName
                                                }
                                            </a>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string? ServerAbbreviation { get; set; }

    private readonly Dictionary<(string region, string summonerName), int> _masteryPoints = new();

    LeagueOfLegendsReadOnlyCollection<SpectatorFeaturedGameInfo>? _featuredGames;

    protected override async Task OnParametersSetAsync()
    {
        if (ServerAbbreviation == null)
        {
            var savedPlatform = await localStorage.GetItemAsync<PlatformRoute?>("region");
            NavManager.NavigateTo(savedPlatform ?? Server.NA);
            return;
        }
        if (Server.TryParse(ServerAbbreviation, out var server))
        {
            if (ServerAbbreviation != server.Abbreviation.ToLower())
            {
                NavManager.NavigateTo(server);
                return;
            }
            await LoadFeaturedGamesAsync(server);
        }
        else
            NavManager.NavigateTo(Server.NA);
    }

    private async Task LoadFeaturedGamesAsync(Server server)
    {
        try
        {
            using (var client = new LeagueOfLegendsClient("github", server))
            {
                var featuredGames = await client.GetSpectatorFeaturedGamesAsync();
                _featuredGames = featuredGames.GameList;
            }

            _ = Task.Run(async () =>
            {
                foreach (var platformGames in _featuredGames.GroupBy(g => g.PlatformId))
                {
                    KeyValuePair<(string region, string summonerName), int>[] result;
                    using (var client = new LeagueOfLegendsClient("github", Server.Parse(platformGames.Key)))
                    {
                        var masteryTasks = platformGames.SelectMany(g => g.Participants).DistinctBy(p => p.SummonerName).Select(async participant =>
                        {
                            try
                            {
                                var summoner = await client.GetSummonerByNameAsync(participant.SummonerName);
                                var masteries = await client.GetChampionMasteriesAsync(summoner.Id);

                                return new KeyValuePair<(string region, string summonerName), int>((platformGames.Key, participant.SummonerName), masteries.Where(m => m.ChampionId == participant.ChampionId).Select(m => m.ChampionPoints).SingleOrDefault());
                            }
                            catch (Exception ex)
                            {
                                SentrySdk.CaptureException(ex);
                                return default;
                            }
                        }).ToArray();

                        result = await Task.WhenAll(masteryTasks);
                    }

                    foreach (var (key, value) in result)
                        _masteryPoints.Add(key, value);

                    StateHasChanged();

                }
            }).ConfigureAwait(false);

        }
        catch
        {
            // Ignore
        }
    }

    public void Dispose()
    {
    }

}